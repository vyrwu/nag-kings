/*
 * Kings API
 *
 * This is a sample Kings Server based on the OpenAPI 3.0 specification.
 *
 * API version: 0.1.0
 * Contact: dev.anowak@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
)

var cachedResponse []byte

func requestData(url string) ([]byte, error) {
	if cachedResponse != nil {
		return cachedResponse, nil
	}

	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err

	}
	return body, nil
}

func GetKings(w http.ResponseWriter, r *http.Request) {

	body, err := requestData("https://gist.githubusercontent.com/christianpanton/10d65ccef9f29de3acd49d97ed423736/raw/b09563bc0c4b318132c7a738e679d4f984ef0048/kings")
	if err != nil {
		log.Fatalln(err)
	}

	var kingsRawArray []KingRaw

	json.Unmarshal(body, &kingsRawArray)

	var kingsArray []King

	for _, kingRaw := range kingsRawArray {
		king := King{
			ID:    kingRaw.ID,
			Name:  kingRaw.Nm,
			City:  kingRaw.Cty,
			House: kingRaw.Hse,
			Years: kingRaw.Yrs,
		}
		kingsArray = append(kingsArray, king)
	}

	response, err := json.Marshal(kingsArray)
	if err != nil {
		log.Fatalln(err)
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(response)
	w.WriteHeader(http.StatusOK)
}

func GetKingsStatistics(w http.ResponseWriter, r *http.Request) {

	body, err := requestData("https://gist.githubusercontent.com/christianpanton/10d65ccef9f29de3acd49d97ed423736/raw/b09563bc0c4b318132c7a738e679d4f984ef0048/kings")
	if err != nil {
		log.Fatalln(err)
	}

	var kingsRawArray []KingRaw

	json.Unmarshal(body, &kingsRawArray)

	var longestRulingKingRaw *KingRaw
	var longestYearsRuled int
	houseByYearsRuled := make(map[string]int)
	kingsByFirstNameFrequency := make(map[string]int)
	for _, kingRaw := range kingsRawArray {

		yrs := kingRaw.Yrs
		// if contains - but only one number, then take todays year
		splitYears := strings.Split(yrs, "-")
		if len(splitYears) < 2 {
			continue
		}

		var splitYearsInt []int
		for _, year := range splitYears {
			i, err := strconv.Atoi(year)
			if err != nil {
				if year != "" {
					panic(err)
				}
				i = time.Now().Year()
			}
			splitYearsInt = append(splitYearsInt, i)
		}

		yearsRuled := splitYearsInt[1] - splitYearsInt[0]

		if yearsRuled >= longestYearsRuled {
			// what if there's more kings that ruled the same
			// what if theres only one numbered king
			longestRulingKingRaw = &kingRaw
		}

		hse := kingRaw.Hse
		houseRulingYears := houseByYearsRuled[hse]
		houseByYearsRuled[hse] = houseRulingYears + yearsRuled

		nm := kingRaw.Nm
		fnm := strings.Split(nm, " ")[0]
		if val, ok := kingsByFirstNameFrequency[fnm]; ok {
			kingsByFirstNameFrequency[fnm] = val + 1
		} else {
			kingsByFirstNameFrequency[fnm] = 1
		}
	}

	type house struct {
		Name       string
		YearsRuled int
	}
	var longestRulingHouse house
	for k, v := range houseByYearsRuled {
		if v >= longestRulingHouse.YearsRuled {
			longestRulingHouse = house{
				Name:       k,
				YearsRuled: v,
			}
		}
	}

	type nameFrequency struct {
		Name      string
		Frequency int
	}
	var mostCommonFirstName nameFrequency
	for k, v := range kingsByFirstNameFrequency {
		if v >= mostCommonFirstName.Frequency {
			mostCommonFirstName = nameFrequency{
				Name:      k,
				Frequency: v,
			}
		}
		log.Println(k, v)
	}

	statistics := InlineResponse200{
		TotalKings: int64(len(kingsRawArray)),
		LongestRulingKing: &King{
			ID:    longestRulingKingRaw.ID,
			Name:  longestRulingKingRaw.Nm,
			City:  longestRulingKingRaw.Cty,
			House: longestRulingKingRaw.Hse,
			Years: longestRulingKingRaw.Yrs,
		},
		LongestRulingHouse:  longestRulingHouse.Name,
		MostCommonFirstName: mostCommonFirstName.Name,
	}

	response, err := json.Marshal(statistics)
	if err != nil {
		log.Fatalln(err)
	}

	w.Write(response)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
