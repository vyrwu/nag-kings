/*
 * Kings API
 *
 * This is a sample Kings Server based on the OpenAPI 3.0 specification.
 *
 * API version: 0.1.0
 * Contact: dev.anowak@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"errors"
	"io/ioutil"
	"log"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"
)

var cachedResponse []byte

func requestData(url string) ([]byte, error) {
	if cachedResponse != nil {
		return cachedResponse, nil
	}

	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err

	}
	return body, nil
}

func GetKings(w http.ResponseWriter, r *http.Request) {

	body, err := requestData("https://gist.githubusercontent.com/christianpanton/10d65ccef9f29de3acd49d97ed423736/raw/b09563bc0c4b318132c7a738e679d4f984ef0048/kings")
	if err != nil {
		log.Fatalln(err)
	}

	var kingsRawArray []KingRaw

	json.Unmarshal(body, &kingsRawArray)

	var kingsArray []King

	for _, kingRaw := range kingsRawArray {
		king := King{
			ID:    kingRaw.ID,
			Name:  kingRaw.Nm,
			City:  kingRaw.Cty,
			House: kingRaw.Hse,
			Years: kingRaw.Yrs,
		}
		kingsArray = append(kingsArray, king)
	}

	response, err := json.Marshal(kingsArray)
	if err != nil {
		log.Fatalln(err)
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(response)
	w.WriteHeader(http.StatusOK)
}

func GetKingsStatistics(w http.ResponseWriter, r *http.Request) {

	body, err := requestData("https://gist.githubusercontent.com/christianpanton/10d65ccef9f29de3acd49d97ed423736/raw/b09563bc0c4b318132c7a738e679d4f984ef0048/kings")
	if err != nil {
		log.Fatalln(err)
	}

	var kingsRawArray []KingRaw

	json.Unmarshal(body, &kingsRawArray)

	// var longestRulingKingRaw *KingRaw
	// var longestYearsRuled int
	kingByYearsRuled := make(map[KingRaw]int)
	houseByYearsRuled := make(map[string]int)
	kingsFirstNameCounter := make(map[string]int)
	for _, kingRaw := range kingsRawArray {

		// Get years ruled as int
		yrs := kingRaw.Yrs
		yearsRuled, err := calculateYearsRuledFromString(yrs)
		if err != nil {
			panic(err)
		}

		currentYearsRulingForKing := kingByYearsRuled[kingRaw]
		kingByYearsRuled[kingRaw] = currentYearsRulingForKing + yearsRuled

		// if yearsRuled >= longestYearsRuled {
		// 	longestYearsRuled = yearsRuled
		// 	// what if there's more kings that ruled the same
		// 	// what if theres only one numbered king
		// 	longestRulingKingRaw = &kingRaw
		// }

		hse := kingRaw.Hse
		updateYearsRuledForHouse(houseByYearsRuled, yearsRuled, hse)

		nm := kingRaw.Nm
		firstName := strings.Split(nm, " ")[0]
		incrementKingsNameCounter(kingsFirstNameCounter, firstName)
	}

	type kingRule struct {
		King       KingRaw
		YearsRuled int
	}
	var kingRulings []kingRule
	for k, v := range kingByYearsRuled {
		kingRulings = append(kingRulings, kingRule{
			King:       k,
			YearsRuled: v,
		})
	}
	sort.Slice(kingRulings, func(i, j int) bool {
		return kingRulings[i].YearsRuled > kingRulings[j].YearsRuled
	})

	longestRulingKingRaw := kingRulings[0].King

	type house struct {
		Name       string
		YearsRuled int
	}
	var longestRulingHouse house
	for k, v := range houseByYearsRuled {
		if v >= longestRulingHouse.YearsRuled {
			longestRulingHouse = house{
				Name:       k,
				YearsRuled: v,
			}
		}
	}

	type nameFrequency struct {
		Name      string
		Frequency int
	}
	var mostCommonFirstName nameFrequency
	for k, v := range kingsFirstNameCounter {
		if v >= mostCommonFirstName.Frequency {
			mostCommonFirstName = nameFrequency{
				Name:      k,
				Frequency: v,
			}
		}
	}

	statistics := InlineResponse200{
		TotalKings: int64(len(kingsRawArray)),
		LongestRulingKing: &King{
			ID:    longestRulingKingRaw.ID,
			Name:  longestRulingKingRaw.Nm,
			City:  longestRulingKingRaw.Cty,
			House: longestRulingKingRaw.Hse,
			Years: longestRulingKingRaw.Yrs,
		},
		LongestRulingHouse:  longestRulingHouse.Name,
		MostCommonFirstName: mostCommonFirstName.Name,
	}

	response, err := json.Marshal(statistics)
	if err != nil {
		log.Fatalln(err)
	}

	w.Write(response)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func calculateYearsRuledFromString(yearsRuledString string) (int, error) {
	splitYears := strings.Split(yearsRuledString, "-")
	if len(splitYears) == 1 {
		return 1, nil
	}

	if len(splitYears) > 2 {
		return -1, errors.New("More than two years in range")
	}

	var splitYearsInt []int
	for _, year := range splitYears {
		i, err := strconv.Atoi(year)
		if err != nil {
			if year != "" {
				return -1, err
			}
			i = time.Now().Year()
		}
		splitYearsInt = append(splitYearsInt, i)
	}

	yearsRuled := splitYearsInt[1] - splitYearsInt[0]
	return yearsRuled, nil
}

func updateYearsRuledForHouse(houseByYearsRuled map[string]int, yearsRuled int, houseName string) {
	currentHouseRulingYears := houseByYearsRuled[houseName]
	houseByYearsRuled[houseName] = currentHouseRulingYears + yearsRuled
}

func incrementKingsNameCounter(kingsFirstNameCounter map[string]int, firstName string) {
	if _, ok := kingsFirstNameCounter[firstName]; ok {
		kingsFirstNameCounter[firstName]++
	} else {
		kingsFirstNameCounter[firstName] = 1
	}
}
