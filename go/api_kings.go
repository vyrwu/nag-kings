/*
 * Kings API
 *
 * This is a sample Kings Server based on the OpenAPI 3.0 specification.
 *
 * API version: 0.1.0
 * Contact: dev.anowak@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"errors"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
)

var cachedResponse []byte

func requestData(url string) ([]byte, error) {
	if cachedResponse != nil {
		return cachedResponse, nil
	}

	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err

	}
	return body, nil
}

func GetKings(w http.ResponseWriter, r *http.Request) {

	body, err := requestData("https://gist.githubusercontent.com/christianpanton/10d65ccef9f29de3acd49d97ed423736/raw/b09563bc0c4b318132c7a738e679d4f984ef0048/kings")
	if err != nil {
		log.Fatalln(err)
	}

	var kingsRawArray []KingRaw

	json.Unmarshal(body, &kingsRawArray)

	var kingsArray []King

	for _, kingRaw := range kingsRawArray {
		king := King{
			ID:    kingRaw.ID,
			Name:  kingRaw.Nm,
			City:  kingRaw.Cty,
			House: kingRaw.Hse,
			Years: kingRaw.Yrs,
		}
		kingsArray = append(kingsArray, king)
	}

	response, err := json.Marshal(kingsArray)
	if err != nil {
		log.Fatalln(err)
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(response)
	w.WriteHeader(http.StatusOK)
}

func GetKingsStatistics(w http.ResponseWriter, r *http.Request) {

	body, err := requestData("https://gist.githubusercontent.com/christianpanton/10d65ccef9f29de3acd49d97ed423736/raw/b09563bc0c4b318132c7a738e679d4f984ef0048/kings")
	if err != nil {
		log.Fatalln(err)
	}

	var kingsRawArray []KingRaw

	json.Unmarshal(body, &kingsRawArray)

	kingByYearsRuled := make(map[King]int)
	houseByYearsRuled := make(map[string]int)
	kingsFirstNameCounter := make(map[string]int)
	for _, kingRaw := range kingsRawArray {
		king := King{
			ID:    kingRaw.ID,
			Name:  kingRaw.Nm,
			City:  kingRaw.Cty,
			House: kingRaw.Hse,
			Years: kingRaw.Yrs,
		}

		yearsRuled, err := calculateYearsRuledFromString(king.Years)
		if err != nil {
			panic(err)
		}

		currentKingRulingYears := kingByYearsRuled[king]
		kingByYearsRuled[king] = currentKingRulingYears + yearsRuled

		currentHouseRulingYears := houseByYearsRuled[king.House]
		houseByYearsRuled[king.House] = currentHouseRulingYears + yearsRuled

		nm := kingRaw.Nm
		firstName := strings.Split(nm, " ")[0]
		if _, ok := kingsFirstNameCounter[firstName]; ok {
			kingsFirstNameCounter[firstName]++
		} else {
			kingsFirstNameCounter[firstName] = 1
		}
	}

	longestRulingKingOut := calculateLongestRulingKing(kingByYearsRuled)
	longestRulingHouseOut := calculateLongestRulingHouse(houseByYearsRuled)
	mostCommonFirstNameOut := calculateMostCommonFirstName(kingsFirstNameCounter)

	statistics := KingsStatistics{
		TotalKings:          len(kingsRawArray),
		LongestRulingKing:   <-longestRulingKingOut,
		LongestRulingHouse:  <-longestRulingHouseOut,
		MostCommonFirstName: <-mostCommonFirstNameOut,
	}

	response, err := json.Marshal(statistics)
	if err != nil {
		log.Fatalln(err)
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(response)
	w.WriteHeader(http.StatusOK)
}

func calculateYearsRuledFromString(yearsRuledString string) (int, error) {
	splitYears := strings.Split(yearsRuledString, "-")
	if len(splitYears) == 1 {
		return 1, nil
	}

	if len(splitYears) > 2 {
		return -1, errors.New("More than two years in range")
	}

	var splitYearsInt []int
	for _, year := range splitYears {
		i, err := strconv.Atoi(year)
		if err != nil {
			if year != "" {
				return -1, err
			}
			i = time.Now().Year()
		}
		splitYearsInt = append(splitYearsInt, i)
	}

	yearsRuled := splitYearsInt[1] - splitYearsInt[0]
	return yearsRuled, nil
}

func calculateLongestRulingKing(kingsByYearsRuled map[King]int) <-chan *KingsStatisticsLongestRulingKing {
	out := make(chan *KingsStatisticsLongestRulingKing)
	go func() {
		var lrk KingsStatisticsLongestRulingKing
		for k, y := range kingsByYearsRuled {
			if y < lrk.YearsRuled {
				continue
			}
			nk := []King{k}
			if (lrk.YearsRuled == 0) || lrk.YearsRuled == y {
				nk = append(nk, lrk.King...)
			}
			lrk = KingsStatisticsLongestRulingKing{
				King:       nk,
				YearsRuled: y,
			}
		}
		out <- &lrk
		close(out)
	}()
	return out
}

func calculateLongestRulingHouse(houseByYearsRuled map[string]int) <-chan *KingsStatisticsLongestRulingHouse {
	out := make(chan *KingsStatisticsLongestRulingHouse)
	go func() {
		var lrh KingsStatisticsLongestRulingHouse
		for h, y := range houseByYearsRuled {
			if y < lrh.YearsRuled {
				continue
			}
			nh := []string{h}
			if (lrh.YearsRuled == 0) || lrh.YearsRuled == y {
				nh = append(nh, lrh.HouseName...)
			}
			lrh = KingsStatisticsLongestRulingHouse{
				HouseName:  nh,
				YearsRuled: y,
			}
		}
		out <- &lrh
		close(out)
	}()
	return out
}

func calculateMostCommonFirstName(kingsFirstNameCounter map[string]int) <-chan []string {
	out := make(chan []string)
	go func() {
		type counter struct {
			FirstName []string
			Count     int
		}
		var co counter
		for n, c := range kingsFirstNameCounter {
			if c < co.Count {
				continue
			}
			nn := []string{n}
			if (co.Count == 0) || co.Count == c {
				nn = append(nn, co.FirstName...)
			}
			co = counter{
				FirstName: nn,
				Count:     c,
			}
		}
		out <- co.FirstName
		close(out)
	}()
	return out
}
