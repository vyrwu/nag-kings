/*
 * Kings API
 *
 * This is a sample Kings Server based on the OpenAPI 3.0 specification.
 *
 * API version: 0.1.0
 * Contact: dev.anowak@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/base64"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"
)

func Logger(inner http.Handler, name string) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		inner.ServeHTTP(w, r)

		log.Printf(
			"%s %s %s %s",
			r.Method,
			r.RequestURI,
			name,
			time.Since(start),
		)
	})
}

// Authenticator implements simple basic auth
func Authenticator(inner http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		// normally we delegate to Auth service, here we do manual check.
		const username = "test"
		const password = "nicolasCage123"

		header := r.Header.Get("Authorization")
		if header == "" {
			http.Error(w, "Bad or missing Authorization header", http.StatusUnauthorized)
			return
		}
		credentialsDecoded, err := base64.StdEncoding.DecodeString(header)
		if err != nil {
			fmt.Println(err)
			http.Error(w, "Couldn't decode credentials", http.StatusUnauthorized)
			return
		}
		credentials := strings.SplitN(string(credentialsDecoded), ":", 2)
		if credentials[0] != username || credentials[1] != password {
			http.Error(w, "Authorization Failed", http.StatusUnauthorized)
			return
		}
		inner.ServeHTTP(w, r)
	})
}
